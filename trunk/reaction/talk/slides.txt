== Воксельное октарное дерево (SVO) ==

==== Постановка задачи ====
Разработка и реализация подхода к представлению 3D объектов, отвечающего следующим требованиям:
* Компактное хранение 3D объектов со сложной поверхностью
* Возможность интерактивной визуализации
* Возможность динамической модификации

==== Полигональное представление 3D-объектов ====
<[columns]
[[[6.0cm]]]
* Хорошо отработанный метод
* Быстрая GPU-растеризация
* !Сложно "просверлить дырку"! _gray_(тесселяция, изменение топологии)_
* !Сложно строить уровни детализации!


[[[6.0cm]]]
<<<coral_poly.png, width=5.5cm>>>

[columns]>

==== Воксельное представление (3D массив) ====

<[columns]
[[[6.0cm]]]
* Используется в медицинской и научной графике
* Методы рендеринга, пригодные для интерактивной визуализации
* Легко редактировать _gray_(как растровое изображение, только 3D)_
* !Очень требовательно к памяти!

[[[6.0cm]]]
<<<tree_volume.png, width=5.5cm>>>

[columns]>

==== Воксельное октарное дерево (SVO) (1) ====
<[columns]
[[[8.5cm]]]
* Аппроксимирует объекты кубическими _blue_вокселями_
* Хранит только воксели, близкие к границам объектов, в _blue_октарном дереве_ _gray_(варианты: spatial hash, ...)_
* Обратная трассировка лучей для визуализации
* Уровни детализации во внутренних узлах
* Логические опреции над поддеревьями для редактирования

[[[4cm]]]
<[center]
<<<tree.pdf, width=4cm>>>
[center]>

[columns]>

==== Воксельное октарное дерево (SVO) (2) ====
<[center]
<<<svo_rays.pdf, height=9cm>>>
[center]>

==  CUDA SVO Raycasting demo ==

==== Особенности реализации (1) ====
<[columns][t]
[[[6cm]]]
<[block]{CPU}
* SVO хранится в линейном массиве, _blue_разбитом на стриницы_
* Редактирование при помощи _blue_логических операций_ над деревьями
* Передача измененных страниц на GPU
[block]>

[[[6cm]]]
<[block]{CUDA GPU}
* SVO в 1D текстуре
* Трассировка лучей
** _blue_без стека_
* Сокрытие артефактов визуализации
[block]>

[columns]>

==== Особенности реализации (2) ====

<[columns][t]
[[[6cm]]]
<[block]{Данные}
* 32 бита на воксель (16 - цвет, 16 - нормаль)
* 32-х битные ссылки
* Узел дерева:
** флаги
** ссылка на родителя
** LOD воксель
** 8 ссылок/вокселей
[block]>

[[[6cm]]]
<[block]{Трассировка}
* Без стека
* Конечный автомат
* Использует указатели на предков для прохода вверх по дереву
[block]>
[columns]>

%* 32 бита на воксель (16 - цвет, 16 - упакованная номаль)
%* Редактрование SVO на CPU _gray_(сложение/вычитание объемов)_
%* Визуализация на GPU при помощи CUDA _blue_(800x600, 25-30fps, NVIDIA GeForce 275)_
%* SVO упакованно в 1D-текстуру
%* Безстековая трассировка луча
%* Уровни детализации
%* Сокрытие воксельных артектов _gray_(dither + multisampling)_

==== Демо ====
<[center]
<<<demo_shot.png, height=7.5cm>>>
[center]>

==== Борьба с артефактами вокселизации (1) ====
<[center]
<<<closeup_1.png, height=7.5cm>>>
[center]>

==== Борьба с артефактами вокселизации (2) ====
<[center]
<<<closeup_2.png, height=7.5cm>>>
[center]>

==== Борьба с артефактами вокселизации (3) ====
<[center]
<<<closeup_3.png, height=7.5cm>>>
[center]>

==== Оценка производительности ====

* NVIDIA GeForce 275
* Разрешение 800x600

<[center]
%\rowcolors{1}{RoyalBlue!20}{RoyalBlue!5}
<[tabular]{|c|c|c|c|} \hline
Размер сцены     & объем     &  время (((трассировки лучей для тестового кадра)))\\ \hline
256                    &             5мб         &  7 мс  \\
512                    &            19мб        &  12 мс \\
1024                  &           79 мб         &   18 мс (((30 мс, если не используется 1D texture fetch))) \\ \hline
[tabular]>
[center]>

== Заключение ==

====  ====

<[block]{Результаты}
* Реализовано SVO-представление 3D сцен для интерактивных приложений
* Для эффективной визуализации сцены используется технология NVIDIA CUDA
[block]>

\vfill
<[block]{Перспективы}
* Реализация более гибких структур данных
* Построение и обновление воксельной сцены на GPU
* Исследование вариантов применения разработанного подхода
[block]>
  
==== GPU вокселизация ====
<[columns]
[[[6.0cm]]]

* Однопроходная вокселизация полигональной модели
* Использование растеризатор GPU
* Векторизация с использованием битовых операций

'''Желаемый результат: ускорение построения SVO'''
[[[6.0cm]]]
<<<voxel_rabbit.png, width=5.5cm>>>
[columns]>

==== Модель роста кораллов ====
<[columns]
[[[6.0cm]]]
''Полип-ориентированная'' (Polyp-oriented) модель использует как воксельное, так и полигональное представление коралла. 

\vfill
'''Желаемый результат: применение SVO для реализации молели без полигонального представления'''

[[[6.0cm]]]
<<<coral.png, width=5.5cm>>>
[columns]>

