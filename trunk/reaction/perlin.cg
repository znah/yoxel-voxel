//

uniform sampler1D uPerlinPerm;
uniform sampler1D uPerlinGrad;
uniform sampler2D uPerlinPerm2d;
uniform sampler1D uPerlinGradPerm;

float3 _fade(float3 t)
{
  return t * t * t * (t * (t * 6 - 15) + 10); // new curve
  //return t * t * (3 - 2 * t); // old curve
}

float _perm(float x)
{
  return tex1D(uPerlinPerm, x).r;
}

float _grad(float x, float3 p)
{
  return dot(tex1D(uPerlinGrad, x*16.0).xyz, p);
}

float _gradperm(float x, float3 p)
{
  //return _grad(_perm(x), p);
  return dot(tex1D(uPerlinGradPerm, x).xyz, p);
}

float4 _perm2d(float2 p0)
{
/*  const float one = 1.0 / 256.0;
  float A  = _perm(p0.x) + p0.y;
  float AA = _perm(A);
  float AB = _perm(A + one);
  float B  = _perm(p0.x + one) + p0.y;
  float BA = _perm(B);
  float BB = _perm(B + one);
  return float4(AA, BA, AB, BB);*/
  return tex2D(uPerlinPerm2d, p0);
}

// 3D version
float noise3d(float3 p)
{
  const float one = 1.0 / 256.0;
  float3 p0 = frac(floor(p) * one);
  p -= floor(p);
  float3 f = _fade(p);

  float4 A = _perm2d(p0.xy) + p0.z;

  // AND ADD BLENDED RESULTS FROM 8 CORNERS OF CUBE
  return lerp(
    lerp(lerp(_gradperm(A.x, p),
              _gradperm(A.y, p + float3(-1, 0, 0)), f.x),
         lerp(_gradperm(A.z, p + float3(0, -1, 0)),
              _gradperm(A.w, p + float3(-1, -1, 0)), f.x), f.y),
    lerp(lerp(_gradperm(A.x + one, p + float3(0, 0, -1)),
              _gradperm(A.y + one, p + float3(-1, 0, -1)), f.x),
         lerp(_gradperm(A.z + one, p + float3(0, -1, -1)),
              _gradperm(A.w + one, p + float3(-1, -1, -1)), f.x), f.y),
    f.z);
}

float noise3d(float x, float y, float z)
{
  return noise3d(float3(x, y, z));
}
