//

uniform sampler2D indexTex;
uniform sampler2D cacheTex;
uniform float tileSize;
uniform float indexSize;
uniform float cacheTexSize;
uniform float vtexSize;
uniform float maxLod;
uniform float border;
uniform float padTileSize;

const float eps = 0.00001;

float calcLod(float2 dx, float2 dy)
{
  float2 d = sqrt(dx*dx + dy*dy);
  float lo = min(d.x, d.y);
  float hi = max(d.x, d.y);
  float md = 0.5 * (lo + hi);
  float lod = log2(md*vtexSize) + 0.7; // lod bias
  return clamp(lod, 0, maxLod-eps);
}

float4 vtexFetchLod(float2 texCoord, float lod, float2 dx, float2 dy)
{
  float3 tileData = tex2Dlod(indexTex, float4(texCoord, 0, lod)).xyz;
  while (tileData.z == 0)
    tileData = tex2Dlod(indexTex, float4(texCoord, 0, ++lod)).xyz;
  float2 tileIdx = tileData.xy;
  float tileScale = tileData.z;
  float2 posInTile = frac(texCoord * indexSize / tileScale);

  float2 posInCache = (tileIdx * padTileSize + border + posInTile*tileSize) / cacheTexSize;

  float dcoef = vtexSize / cacheTexSize / tileScale;
  return tex2D(cacheTex, posInCache, dx*dcoef, dy*dcoef);
}

float4 vtexFetch(float2 texCoord, float2 dx, float2 dy)
{
  float lod = calcLod(dx, dy);
  float hiLod = floor(lod);
  float loLod = hiLod + 1;
  float4 c1 = vtexFetchLod(texCoord, hiLod, dx, dy);
  float4 c2 = vtexFetchLod(texCoord, loLod, dx, dy);
  return lerp(c1, c2, lod - hiLod);
}
